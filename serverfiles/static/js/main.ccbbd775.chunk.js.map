{"version":3,"sources":["actions/apiHandlers/tvShowListApiHandlers.js","constants/apiConstants.js","constants/urlConstants.js","actions/componentActions/tvShowListActions.js","components/Header/header.js","screens/homepage/homepage.js","screens/tvShowDetails/tvShowInformation.js","screens/tvShowDetails/tvShowDetails.js","App.js","serviceWorker.js","reducers/tvShowListReducer.js","reducers/tvShowInformationReducer.js","reducers/relatedTVShowsInformationReducer.js","reducers/rootReducer.js","index.js","store.js"],"names":["Handler","tvShowsListFetching","type","isLoading","tvShowsListFetchError","error","tvShowsListFetchSuccess","items","tvShowInformationFetching","tvShowInformationFetchError","tvShowInformationFetchSuccess","data","relatedTVShowInformationFetching","relatedTVShowInformationFetchError","relatedTVShowInformationFetchSuccess","ApiBaseUrl","ServerApiBaseUrl","fetchTvShowsList","dispatch","axios","get","concat","then","response","catch","console","log","Header","Layout","HeaderComponent","state","selectedAgeOption","value","label","selectedGenderOption","handleAgeChange","_this","setState","handleGenderChange","react_default","a","createElement","className","Component","Footer","Content","Meta","Card","HomeScreen","showsList","this","props","nextProps","_this2","tvShowsListState","tvShowItems","length","topShows","filter","item","index","rows","cols","map","tvShow","push","renderTVShowData","row","key","inputData","_this3","show","col","xs","sm","md","lg","xl","name","card","hoverable","cover","alt","src","image","medium","onClick","handleCardClick","id","title","description","premiered","showid","parentElementId","history","layout","Header_header","connect","tvShowListReducer","TVShowInformation","renderShowDetailRow","rowTitle","rowText","tvShowInformationObject","language","genres","join","status","network","schedule","days","time","renderHTML","summary","rating","average","build_default","starRatedColor","numberOfStars","starDimension","starSpacing","TVShowDetails","tvShowInformation","relatedTVShows","renderShowCard","style","width","tvShowDetails_Meta","avatar","renderRelatedContentCard","tvShowInformationState","isTvShowInformationFetching","isTvShowInformationFetchError","Object","keys","tvShowDetails_tvShowInformation","relatedTVShowsListState","isRelatedTvShowsFetching","isRelatedTvShowsFetchError","relatedTVShowsArray","relatedTVShowItems","gutter","justify","showCards","i","tvShowObject","find","fetchTvShowInformation","match","params","fetchRelatedTVShows","tvShowDetails_Content","tvShowInformationReducer","relatedTVShowsInformationReducer","showId","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","initialState","isTvShowsFetching","isTvShowsFetchError","tvShowError","tvShowInformationError","relarray","relatedTVShowError","combineReducers","arguments","undefined","action","objectSpread","related_show_ids","ReactDOM","render","es","store","createStore","rootReducer","applyMiddleware","thunk","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ccbbd775.chunk.js","sourcesContent":["/**\n * This file contains all handler functions for making\n * api calls for fetching tv shows list\n */\nimport * as actionTypes from '../../constants/apiConstants.js';\nexport const Handler = {\n  tvShowsListFetching: function() {\n    return {\n      type: actionTypes.TVSHOWSLIST_FETCHING,\n      isLoading: true\n    }\n  },\n  tvShowsListFetchError: function(error) {\n    return {\n      type: actionTypes.TVSHOWSLIST_FETCH_ERROR,\n      error: error\n    }\n  },\n  tvShowsListFetchSuccess: function(items) {\n    return {\n      type: actionTypes.TVSHOWSLIST_FETCH_SUCCESS,\n      items\n    }\n  },\n  tvShowInformationFetching: function() {\n    return {\n      type: actionTypes.TVSHOW_INFORMATION_FETCHING,\n      isLoading: true\n    }\n  },\n  tvShowInformationFetchError: function(error) {\n    return {\n      type: actionTypes.TVSHOW_INFORMATION_FETCH_ERROR,\n      error: error\n    }\n  },\n  tvShowInformationFetchSuccess: function(data) {\n    return {\n      type: actionTypes.TVSHOW_INFORMATION_FETCH_SUCCESS,\n      data: data\n    }\n  },\n  relatedTVShowInformationFetching: function() {\n    return {\n      type: actionTypes.RELATED_TVSHOWS_INFORMATION_FETCHING,\n      isLoading: true\n    }\n  },\n  relatedTVShowInformationFetchError: function(error) {\n    return {\n      type: actionTypes.RELATED_TVSHOWS_INFORMATION_FETCH_ERROR,\n      error: error\n    }\n  },\n  relatedTVShowInformationFetchSuccess: function(data) {\n    return {\n      type: actionTypes.RELATED_TVSHOWS_INFORMATION_FETCH_SUCCESS,\n      data: data\n    }\n  },\n}\n","/**\n * All constant to be used by actions and reducers\n */\nexport const TVSHOWSLIST_FETCHING = 'TVSHOWSLIST_FETCHING';\nexport const TVSHOWSLIST_FETCH_ERROR = 'TVSHOWSLIST_FETCH_ERROR';\nexport const TVSHOWSLIST_FETCH_SUCCESS = 'TVSHOWSLIST_FETCH_SUCCESS';\n\nexport const TVSHOW_INFORMATION_FETCHING = 'TVSHOW_INFORMATION_FETCHING';\nexport const TVSHOW_INFORMATION_FETCH_ERROR = 'TVSHOW_INFORMATION_FETCH_ERROR';\nexport const TVSHOW_INFORMATION_FETCH_SUCCESS = 'TVSHOW_INFORMATION_FETCH_SUCCESS';\n\nexport const RELATED_TVSHOWS_INFORMATION_FETCHING = 'RELATED_TVSHOWS_INFORMATION_FETCHING';\nexport const RELATED_TVSHOWS_INFORMATION_FETCH_ERROR = 'RELATED_TVSHOWS_INFORMATION_FETCH_ERROR';\nexport const RELATED_TVSHOWS_INFORMATION_FETCH_SUCCESS = 'RELATED_TVSHOWS_INFORMATION_FETCH_SUCCESS';\n","export const ApiBaseUrl = 'https://api.tvmaze.com/';\nexport const ServerApiBaseUrl = 'https://flasksamplesite.herokuapp.com/';\n","import axios from 'axios';\nimport {Handler} from '../apiHandlers/tvShowListApiHandlers';\nimport {ApiBaseUrl, ServerApiBaseUrl} from '../../constants/urlConstants';\nexport function fetchTvShowsList() {\n    return (dispatch) => {\n        dispatch(Handler.tvShowsListFetching());\n        axios.get(`${ApiBaseUrl}schedule?country=US`)\n                  .then(function (response) {\n                    // handle success\n                    dispatch(Handler.tvShowsListFetchSuccess(response.data));\n                  })\n                  .catch(function (error) {\n                    // handle error\n                    console.log(error);\n                    dispatch(Handler.tvShowsListFetchError(error));\n                  })\n    };\n}\n\nexport function fetchTvShowInformation(showId) {\n    return (dispatch) => {\n        dispatch(Handler.tvShowInformationFetching());\n        axios.get(`${ApiBaseUrl}shows/${showId}`)\n                  .then(function (response) {\n                    // handle success\n                    dispatch(Handler.tvShowInformationFetchSuccess(response.data));\n                  })\n                  .catch(function (error) {\n                    // handle error\n                    console.log(error);\n                    dispatch(Handler.tvShowInformationFetchError(error));\n                  })\n    };\n}\n\nexport function fetchRelatedTVShows(showId) {\n    return (dispatch) => {\n        dispatch(Handler.relatedTVShowInformationFetching());\n        axios.get(`${ServerApiBaseUrl}relatedshows?showid=${showId}`)\n                  .then(function (response) {\n                    // handle success\n                    dispatch(Handler.relatedTVShowInformationFetchSuccess(response.data));\n                  })\n                  .catch(function (error) {\n                    // handle error\n                    console.log(error);\n                    dispatch(Handler.relatedTVShowInformationFetchError(error));\n                  })\n    };\n}\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nimport './header.css';\nimport { Layout } from 'antd';\nconst { Header } = Layout;\n\nconst ageOptions = [\n  { value: 'teenager', label: '10-20' },\n  { value: 'youngadult', label: '20-40' },\n  { value: 'adult', label: '40-60' }\n];\n\nconst genderOptions = [\n  { value: 'male', label: 'Male' },\n  { value: 'female', label: 'Female' }\n];\nclass HeaderComponent extends Component {\n  state = {\n    selectedAgeOption: {value: \"youngadult\", label: \"20-40\"},\n    selectedGenderOption: {value: \"female\", label: \"Female\"}\n  }\n  handleAgeChange = (selectedAgeOption) => {\n    this.setState({ selectedAgeOption });\n    console.log(`Option selected:`, selectedAgeOption);\n  }\n\n  handleGenderChange = (selectedGenderOption) => {\n    this.setState({ selectedGenderOption });\n    console.log(`Option selected:`, selectedGenderOption);\n  }\n  render() {\n  return(\n    <Header>\n      <div className=\"header-row\">\n      <span className=\"header-title\">TV Shows</span>\n      {/*\n      <div className=\"options-row\">\n        <span className=\"option-title\">\n        Age:\n        </span>\n        <div className=\"option-select\">\n          <Select\n            value={this.state.selectedAgeOption}\n            onChange={this.handleAgeChange}\n            options={ageOptions}\n          />\n        </div>\n        <span className=\"option-title\">\n        Gender:\n        </span>\n        <div className=\"option-select\">\n          <Select\n            value={this.state.selectedGenderOption}\n            onChange={this.handleGenderChange}\n            options={genderOptions}\n          />\n        </div>\n      </div>*/}\n      </div>\n    </Header>\n  );\n  }\n}\n\nexport default HeaderComponent;\n","/**\n * HomeScreen component to show tv shows list\n * @type {Class}\n */\nimport React, { Component } from 'react';\nimport './homepage.css';\nimport { connect } from 'react-redux';\nimport { fetchTvShowsList } from '../../actions/componentActions/tvShowListActions.js';\nimport {  Row, Col } from 'antd';\nimport { Card } from 'antd';\nimport HeaderComponent from '../../components/Header/header';\n/**\n * Layout Components from antd UI library\n * More info: https://ant.design/components/layout/\n */\nimport { Layout } from 'antd';\nconst { Footer, Content } = Layout;\nconst { Meta } = Card;\n\nclass HomeScreen extends Component {\n  state = {\n    showsList : []\n  }\n\n  componentDidMount(){\n    this.props.fetchTvShowsList();\n  }\n\n  componentWillReceiveProps(nextProps){\n    if(nextProps.tvShowsListState.tvShowItems.length){\n      const topShows = nextProps.tvShowsListState.tvShowItems.filter((item,index) => {\n        if(index < 12){\n          return true;\n        } else {\n          return false;\n        }\n      });\n      let rows = [];\n      let cols = [];\n      topShows.map((tvShow,index) => {\n        cols.push(this.renderTVShowData(tvShow));\n      });\n      rows.push(\n        <Row key={\"afsd\"}>\n         {cols}\n        </Row>\n      );\n      this.setState({ showsList: rows});\n    }\n  }\n\n  /**\n   * Funtion to render TV show cards in UI\n   * @param  {Object} data [data for each card]\n   * @return {JSX Markup}      [Card elements JSX markup]\n   */\n  renderTVShowData(inputData){\n    const data = inputData.show;\n    return(\n      <Col xs={24} sm={12} md={8} lg={8} xl={6} key={data.name}>\n      <center>\n      <Card\n          hoverable\n          className=\"tvShowCard\"\n          cover={<img alt=\"example\" src={data.image.medium}/>}\n          onClick= {() => this.handleCardClick(data.id, inputData.id)}\n        >\n          <Meta\n            title={data.name}\n            description={data.premiered}\n          />\n        </Card>\n        </center>\n      </Col>\n    )\n  }\n\n  /**\n   * Function to redirect user to individual show information\n   * @param  {Integer} id [unique id for each show]\n   * @return {null}    [null]\n   */\n  handleCardClick(showid, parentElementId) {\n    this.props.history.push(`/showdetails/${showid}/${parentElementId}`);\n  }\n\n  render() {\n    return (\n      <Layout>\n        <HeaderComponent/>\n        <Content className=\"content\">\n        {this.state.showsList}\n        </Content>\n        <Footer>Footer</Footer>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    tvShowsListState: state.tvShowListReducer\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchTvShowsList: () => dispatch(fetchTvShowsList())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen);\n","import React, { Component } from 'react';\nimport renderHTML from 'react-render-html';\nimport StarRatings from 'react-star-ratings';\n\nclass TVShowInformation extends Component {\n  renderShowDetailRow = (rowTitle, rowText) => {\n    return(\n      <div>\n        <span className=\"title\">{rowTitle}</span>\n        <span className=\"text\">{rowText}</span>\n      </div>\n    )\n  }\n\n  render() {\n    const tvShowInformationObject = this.props.tvShowInformationObject;\n    return(\n      <div className=\"showDetails\">\n        <div className=\"detailsTitle\">\n        <h1>Show Information</h1>\n        </div>\n        {this.renderShowDetailRow(\"Show Name: \", tvShowInformationObject.name)}\n        {this.renderShowDetailRow(\"Language: \", tvShowInformationObject.language)}\n        {this.renderShowDetailRow(\"Genre: \", tvShowInformationObject.genres.join(\" | \"))}\n        {this.renderShowDetailRow(\"Status: \", tvShowInformationObject.status)}\n        {this.renderShowDetailRow(\"Network: \", tvShowInformationObject.network.name)}\n        <div>\n          <span className=\"title\">Schedule: </span>\n          <span className=\"text\">\n          {tvShowInformationObject.schedule.days}s at {tvShowInformationObject.schedule.time}\n          </span>\n        </div>\n        <div>\n          <span className=\"title\">Description: </span>\n          <span className=\"description text\">\n          {renderHTML(tvShowInformationObject.summary)}\n          </span>\n        </div>\n        <div>\n          <span className=\"title\">Rating: </span>\n          <span className=\"text\">\n          {\n            tvShowInformationObject.rating && tvShowInformationObject.rating.average\n            ?\n            <StarRatings\n              rating={tvShowInformationObject.rating.average}\n              starRatedColor=\"red\"\n              numberOfStars={10}\n              name='rating'\n              starDimension='20px'\n              starSpacing='2px'\n            />\n            :\n            null\n          }\n\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\nexport default TVShowInformation;\n","/**\n * Component to show complete details about TV show\n * @type {Class}\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport HeaderComponent from '../../components/Header/header';\nimport TVShowInformation from './tvShowInformation';\nimport { fetchTvShowInformation,fetchRelatedTVShows,fetchTvShowsList } from '../../actions/componentActions/tvShowListActions.js';\nimport find from 'lodash/find';\nimport './tvShowDetails.css';\n/**\n * Layout Components from antd UI library\n * More info: https://ant.design/components/layout/\n */\nimport { Layout,Row,Col,Card,Avatar } from 'antd';\nconst  { Content } = Layout;\nconst { Meta } = Card;\nclass TVShowDetails extends Component {\n  state = {\n    'tvShowInformation' : [],\n    'relatedTVShows': []\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(!nextProps.tvShowInformationState.isTvShowInformationFetching && !nextProps.tvShowInformationState.isTvShowInformationFetchError) {\n      const tvShowInformationObject = nextProps.tvShowInformationState.tvShowInformation;\n      if( Object.keys(tvShowInformationObject).length !== 0) {\n        const tvShowInformation = [];\n        tvShowInformation.push(\n          <Row key=\"tvShowInformation\" >\n            <Col xs={24} sm={12} md={8} lg={8} xl={6}>\n             {this.renderShowCard(tvShowInformationObject)}\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={8} xl={6}>\n              <TVShowInformation\n                tvShowInformationObject={tvShowInformationObject}\n              />\n            </Col>\n          </Row>\n        );\n        this.setState({ tvShowInformation });\n      }\n    }\n\n    if(!nextProps.relatedTVShowsListState.isRelatedTvShowsFetching && !nextProps.relatedTVShowsListState.isRelatedTvShowsFetchError){\n      const relatedTVShowsArray = nextProps.relatedTVShowsListState.relatedTVShowItems;\n      const tvShowItems = nextProps.tvShowsListState.tvShowItems;\n      if( relatedTVShowsArray.length && tvShowItems.length ) {\n        console.log(\"sdfa\", nextProps.tvShowsListState.tvShowItems);\n        const relatedTVShows = [];\n        relatedTVShows.push(\n          <div className=\"relatedContent\" key=\"relatedContent\">\n          <div className=\"relatedContent-heading\">\n          Related Shows:\n          </div>\n          <Row key=\"tvRelatedContent\" gutter={2} type=\"flex\" justify=\"center\">\n          {(() => {\n              let showCards = [];\n              let relatedTVShowIds = nextProps.relatedTVShowsListState;\n              for(let i in relatedTVShowsArray) {\n                let tvShowObject = find(tvShowItems, {id:relatedTVShowsArray[i].id});\n                if(tvShowObject){\n                  showCards.push(\n                    <Col xs={24} sm={12} md={4} lg={4} xl={4} key={i}>\n                      {this.renderRelatedContentCard(tvShowObject.show)}\n                    </Col>\n                  )\n                }\n              }\n              return(showCards)\n            })()}\n          </Row>\n          </div>\n        );\n        this.setState({ relatedTVShows });\n      }\n    }\n  }\n  componentDidMount() {\n    this.props.fetchTvShowsList();\n    this.props.fetchTvShowInformation(this.props.match.params.showid);\n    this.props.fetchRelatedTVShows(this.props.match.params.parentElementId);\n  }\n\n  renderShowCard = (tvShowInformationObject) => {\n    return(\n      <div className=\"cardContainer flexCenter\">\n        <Card\n          hoverable\n          style={{ width: 240 }}\n          cover={<img alt=\"example\" src={tvShowInformationObject.image.medium} />}\n          >\n          <Meta\n            avatar={<Avatar src={tvShowInformationObject.image.medium} />}\n            title=\"Premiered\"\n            description={tvShowInformationObject.premiered}\n          />\n        </Card>\n      </div>\n    );\n  }\n\n  renderRelatedContentCard = (tvShowInformationObject) => {\n    return(\n      <div className=\"cardContainer flexCenter\">\n        <Card\n          hoverable\n          style={{ width: 180 }}\n          cover={<img alt=\"example\" src={tvShowInformationObject.image.medium} />}\n          >\n          <Meta\n            avatar={<Avatar src={tvShowInformationObject.image.medium} />}\n            title={tvShowInformationObject.name}\n            description={tvShowInformationObject.genres[0]}\n          />\n        </Card>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Layout>\n        <HeaderComponent/>\n        <Content>\n          {this.state.tvShowInformation}\n          {this.state.relatedTVShows}\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    tvShowInformationState: state.tvShowInformationReducer,\n    tvShowsListState: state.tvShowListReducer,\n    relatedTVShowsListState: state.relatedTVShowsInformationReducer\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      fetchTvShowInformation: (showid) => dispatch(fetchTvShowInformation(showid)),\n      fetchRelatedTVShows: (parentElementId) => dispatch(fetchRelatedTVShows(parentElementId)),\n      fetchTvShowsList: () => dispatch(fetchTvShowsList())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TVShowDetails);\n","/**\n * Entry level component to handle all routes to different sceens\n * @type {String}\n */\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n//Antd css included globally in the project\nimport 'antd/dist/antd.css';\nimport HomeScreen from './screens/homepage/homepage';\nimport TVShowDetails from './screens/tvShowDetails/tvShowDetails.js';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Router>\n      <div>\n        <Route exact path=\"/\" component={HomeScreen} />\n        <Route path=\"/showdetails/:showid/:parentElementId\" component={TVShowDetails} />\n      </div>\n      </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Reducer for TV Shows list in homescreen\n */\nimport * as actionTypes from '../constants/apiConstants.js';\nconst initialState = {\n  isTvShowsFetching: true,\n  isTvShowsFetchError: false,\n  tvShowItems: [],\n  tvShowError: {}\n}\n\n\nexport default (state = initialState, action) => {\n switch (action.type) {\n  case actionTypes.TVSHOWSLIST_FETCHING:\n    return {\n      ...state,\n      isTvShowsFetching: true\n    }\n\n  case actionTypes.TVSHOWSLIST_FETCH_ERROR:\n  return {\n    ...state,\n    isTvShowsFetching: false,\n    isTvShowsFetchError: true,\n    tvShowError: action.error\n  }\n\n  case actionTypes.TVSHOWSLIST_FETCH_SUCCESS:\n  return {\n    ...state,\n    isTvShowsFetching: false,\n    isTvShowsFetchError: false,\n    tvShowItems:action.items\n  }\n\n  default:\n   return state\n }\n}\n","/**\n * Reducer for TV Shows Information\n */\nimport * as actionTypes from '../constants/apiConstants.js';\nconst initialState = {\n  isTvShowInformationFetching: true,\n  isTvShowInformationFetchError: false,\n  tvShowInformation: [],\n  tvShowInformationError: {}\n}\n\n\nexport default (state = initialState, action) => {\n switch (action.type) {\n  case actionTypes.TVSHOW_INFORMATION_FETCHING:\n    return {\n      ...state,\n      isTvShowInformationFetching: true,\n      isTvShowInformationFetchError: false\n    }\n\n  case actionTypes.TVSHOW_INFORMATION_FETCH_ERROR:\n  return {\n    ...state,\n    isTvShowInformationFetching: false,\n    isTvShowInformationFetchError: true,\n    tvShowError: action.error\n  }\n\n  case actionTypes.TVSHOW_INFORMATION_FETCH_SUCCESS:\n  return {\n    ...state,\n    isTvShowInformationFetching: false,\n    isTvShowInformationFetchError: false,\n    tvShowInformation:action.data\n  }\n\n  default:\n   return state\n }\n}\n","/**\n * Reducer for TV Shows list in homescreen\n */\nimport * as actionTypes from '../constants/apiConstants.js';\nconst initialState = {\n  isRelatedTvShowsFetching: false,\n  isRelatedTvShowsFetchError: false,\n  relatedTVShowItems: [],\n  relarray:[],\n  relatedTVShowError: {}\n}\n\n\nexport default (state = initialState, action) => {\n switch (action.type) {\n  case actionTypes.RELATED_TVSHOWS_INFORMATION_FETCHING:\n    return {\n      ...state,\n      isRelatedTvShowsFetching: true\n    }\n\n  case actionTypes.RELATED_TVSHOWS_INFORMATION_FETCH_SUCCESS:\n    return {\n      ...state,\n      isRelatedTvShowsFetching: false,\n      isRelatedTvShowsFetchError: false,\n      relatedTVShowItems: action.data.related_show_ids,\n    }\n\n  case actionTypes.RELATED_TVSHOWS_INFORMATION_FETCH_ERROR:\n    return {\n      ...state,\n      isRelatedTvShowsFetching: false,\n      isRelatedTvShowsFetchError: true,\n      relatedTVShowError: action.error\n    }\n\n  default:\n   return state\n }\n}\n","/**\n * Main reducer File to combine all component level reducers\n */\nimport { combineReducers } from 'redux';\nimport tvShowListReducer from './tvShowListReducer';\nimport tvShowInformationReducer from './tvShowInformationReducer';\nimport relatedTVShowsInformationReducer from './relatedTVShowsInformationReducer';\nexport default combineReducers({\n tvShowListReducer,\n tvShowInformationReducer,\n relatedTVShowsInformationReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n  <App />\n  </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Central redux store needed to hold entire application state\n * and apply various middlewares\n */\n\n import { createStore, applyMiddleware } from 'redux';\n /*\n  *Thunk is used to create action creators that return a function\n  *More info: https://github.com/reduxjs/redux-thunk\n  */\n import thunk from 'redux-thunk';\n import rootReducer from './reducers/rootReducer';\n export default function configureStore() {\n  return createStore(\n   rootReducer,\n    applyMiddleware(thunk)\n  );\n }\n"],"sourceRoot":""}